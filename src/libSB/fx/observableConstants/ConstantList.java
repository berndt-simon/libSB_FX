/* 
 * The MIT License
 *
 * Copyright 2015 Simon Berndt.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package libSB.fx.observableConstants;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import javafx.beans.InvalidationListener;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;

/**
 *
 * @author Simon Berndt
 */
public final class ConstantList<T> implements ObservableList<T> {

    private final T[] constants;
    private final List<T> autogeneratedList;

    @SuppressWarnings("unchecked")
    public ConstantList(T... constants) {
	this.constants = constants;
	this.autogeneratedList = Collections.unmodifiableList(Arrays.asList(constants));
    }

    @Override
    public void addListener(ListChangeListener<? super T> listener) {
	// No need for this
    }

    @Override
    public void removeListener(ListChangeListener<? super T> listener) {
	// No need for this
    }

    @Override
    @SuppressWarnings("unchecked")
    public boolean addAll(T... elements) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    @SuppressWarnings("unchecked")
    public boolean setAll(T... elements) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean setAll(Collection<? extends T> col) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    @SuppressWarnings("unchecked")
    public boolean removeAll(T... elements) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    @SuppressWarnings("unchecked")
    public boolean retainAll(T... elements) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void remove(int from, int to) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int size() {
	return this.constants.length;
    }

    @Override
    public boolean isEmpty() {
	return this.constants.length < 1;
    }

    @Override
    public boolean contains(Object o) {
	return this.autogeneratedList.contains(o);
    }

    @Override
    public Iterator<T> iterator() {
	return this.autogeneratedList.iterator();
    }

    @Override
    public Object[] toArray() {
	return Arrays.copyOf(this.constants, this.constants.length);
    }

    @Override
    @SuppressWarnings("unchecked")
    public <N> N[] toArray(N[] a) {
	return (N[]) this.constants;
    }

    @Override
    public boolean add(T e) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean remove(Object o) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean containsAll(Collection<?> c) {
	return this.autogeneratedList.containsAll(c);
    }

    @Override
    public boolean addAll(Collection<? extends T> c) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean addAll(int index, Collection<? extends T> c) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean removeAll(Collection<?> c) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean retainAll(Collection<?> c) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void clear() {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public T get(int index) {
	return this.constants[index];
    }

    @Override
    public T set(int index, T element) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void add(int index, T element) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public T remove(int index) {
	throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int indexOf(Object o) {
	return this.autogeneratedList.indexOf(o);
    }

    @Override
    public int lastIndexOf(Object o) {
	return this.autogeneratedList.lastIndexOf(o);
    }

    @Override
    public ListIterator<T> listIterator() {
	return this.autogeneratedList.listIterator();
    }

    @Override
    public ListIterator<T> listIterator(int index) {
	return this.autogeneratedList.listIterator(index);
    }

    @Override
    public List<T> subList(int fromIndex, int toIndex) {
	return this.autogeneratedList.subList(fromIndex, toIndex);
    }

    @Override
    public void addListener(InvalidationListener listener) {
	// No need for this
    }

    @Override
    public void removeListener(InvalidationListener listener) {
	// No need for this
    }

}
